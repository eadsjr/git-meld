#!/bin/bash
# This command melds the branch, like a squahed merge, then hides the associated branches

# Copyright 2015 by Jason Randolph Eads <jeads442@gmail.com>
# Licensed under the Apache License, Version 2.0 (the "License");
#     http://www.apache.org/licenses/LICENSE-2.0

# Exit codes
EX_MISSING_TARGET=4
EX_DUPLICATE_HIDDEN=5
EX_MERGE_FAILED=12

args=${@:2}

branches_index=0

consume_next_arg=false
force_meld=false
meld_quiet=false

for arg in $args:
do
	if [ $consume_next_arg ] ; then
		consume_next_arg=false
		continue
	fi

	case $arg in
		# prepare to consume flag argument in next iteration
		-s|-X|-S|-m)
		consume_next_arg=true
		;;
		# ignore leading message
		HEAD)
		unset branches
		branches_index=0
		;;
		--meld-force)
		force_meld=true		
		;;
		--meld-quiet)
		meld_quiet=true
		;;
		# ignore all normal commands & flags
		-*)
		;;
		*)
		# collect the targets
		branches[$branches_index]=arg
		$((++branches_index))
		;;
	esac
done

for branch in $branches ; do
	if [ ! file -e $(git rev-parse --show-toplevel)/.git/refs/heads/$branch ] ; do
		if [ force_meld ] ; do
			if [ ! meld_quiet ] ; do
				>&2 echo "warning: no branch found for \"" $branch "\"."
			fi
		else
			>&2 echo "ERROR: No branch was found for \"" $branch "\". Use --meld-force to force."
			exit(EX_MISSING_TARGET)
		fi
	fi
	hiddenpath=$(git rev-parse --show-toplevel)/.git/refs/hidden/$branch
	if [ ! file -e $hiddenpath ] ; do
		if [ test -e $hiddenpath ] ; then
			>&2 echo "ERROR: there is already a hidden branch with the name \"" $branch "\" !"
			>&2 echo "To resolve manually relocate or delete \"" $hiddenpath "\""
			exit(EX_DUPLICATE_HIDDEN)
		fi
	fi
done

git merge --squash $args
if [ $? -ne 0 ] ; then
	>&2 echo "ERROR: The internal merge failed. To avoid damage, branches will remain visible."
	>&2 echo "You can hide them manually with 'git hide <branch>'."
	>&2 echo "You should verify the state of your project before proceeding."
	exit(EX_MERGE_FAILED)
else

for branch in $branches ; do
	git hide $branch
done